1. Resolução na pasta "sgtcs_philosophers_code".

2.
2.1: Safety
2.2: liveness
2.3: liveness
2.4: Safety
2.5: liveness
2.6: Safety
2.7: liveness
2.8: Safety


6-
 a) Suppose a computer program has a method "M" that cannot be parallelized, and that this method accounts for 40% of the program’s execution time. What is the limit for the overall speedup that can be achieved by running the program on an n-processor multiprocessor machine?
 S = 1/(1-p + (p/n));
 Lim n -> +oo;
 S = 1/(1-p);
 S = 1/(1-0,6) = 2,5;

 b) Now suppose the sequential part accounts for 30% of the program’s computation time. Let "sn" be the program’s speedup on "n" processes, assuming the rest of the program is perfectly parallelizable. Your boss tells you to double this speedup: the revised program should have speedup s′n > 2*sn. You advertise for a programmer to replace the sequential part with an improved version that runs k times faster. What value of k should you require?
 1/(0,3/k + (0,7/n)) > 2 * 1/(0,3+(0,7/n));
 1 > (0,6/k + 1,4/n)/(0,3+(0,7/n));
 k*(0,3+2,1/n) > 0,6;
 k > (0,6)/(0,3+2,1/n);

 c) Suppose the sequential part can be speed up three-fold, and when we do so, the modified program takes half the time of the original on n processors. What fraction of the overall execution time did the sequential part account for? Express your answer as a function of n.
 1/( (1-p)/3 + (p/n) ) = (1/(1-p+(p/n)))/2;
 2*(1-p+(p/n)) = (1-p)/3 + p/n;
 3*(2-2p+p/n) = 1-p;
 p = 5/(5-3/n);

8-
 1/(1-p + (p/10)) > 5;
 1 > 5 - 5p + 5p/10;
 -4 > -5p + 5p/10; (-1)
 4 <= 5p - 5p/10;
 p >= 8/9 (0,88888...);
