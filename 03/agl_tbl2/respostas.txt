1.

21)
Uma propriedade é considerada 'compositional' quando podemos assumir que: se todos objetos do sistema satifazem uma determinada propriedade então o sistema também satisfaz essa propriedade.

Se todos os objetos de um determinado sistema apresentam 'quiescent consistency' então o sistema também apresenta a propriedade 'quiescent consistency'. Em outras palavras, objetos contruídos a partir de outros objetos quiescent consistent também são quiescent consistent.

23)
Quiescent but not sequential consistent

Thread A: |---E(a)---|                    |---D(b)---| |---D(a)---| |---D(c)---|
Thread B:    |---E(b)---|
Thread C:                   |---E(c)---|

Sequential but not quiescent consistent

Thread A: |---E(a)---|                    |---D(b)---||---D(c)---||---D(a)---|
Thread B:          |---E(b)---|
Thread C:                 |---E(c)---|

c preceeds a so it is not quiescent.

24)
#1) Sequential, quiescent and linear consistent. There is a program flow where these three concurrent thread may execute and we end up reading value 2.
Example:
	1) r.write(1)
	2) r.read(1)
	3) r.write(2)
	4) r.read(2)

#2) Sequential, quiescent and linear consistent. There is a program flow where these three concurrent thread may execute and we end up reading value 1.
Example:
	1) r.write(2)
	2) r.write(1)
	3) r.read(1)
	4) r.read(1)

25) Não. A condição L1 sozinha não garante a ordem de execução.

27) A propriedade 'linearizability' diz que se uma chamada de método precede outra, então os efeitos da primeira, o
chamado linearization point, (e.g. atualização de atributos do objeto) devem acontecer antes do efeitos da segunda chamada.
Os linearization points do enq e deq são as atualizações dos atributos tail e head, respectivamente.

Considerando fila com items e enq() e deq() concorrendo.

Thread A (enq)           Thread B (deq)
---------------------------------------
Linha 7
Linha 8
                         Linha 16
                         Linha 17
                         Linha 18
                         Linha 20
                         Linha 21
                         (return)
Linha 9
Linha 10
(return)

28)
Sim, pois java pode reordenar internamente o fluxo do método writer para atribuir true para a varíavel v antes de
atribuir 42 a x. Enquanto isso, concorrentemente, uma thread pode estar chamando o método reader enquanto o writer está
sendo executado, porém antes de 42 ser atribuído a x.


2. Escrevemos um simples programa que multiplica matrizes de tamanho 3x3, lidas de um arquivo (com 1800 matrizes):
   Usando o comando time do linux, utilizamos a soma user + sys para medir o tempo total de excução. Curiosamente, para
   nosso caso, a implementação sequencial foi a mais rápida de todas.

    - No diretório matricesmultiplier1, está a versão sequencial do programa, onde as matrizes são lidas de um arquivo e
    multiplicadas dois a dois, uma após a outra.
      * Média dos 3 últimos tempos de execução: 20ms

    - No diretório matricesmultiplier2, está a versão paralela utilizando um script para quebrar o arquivo de entrada em
    vários arquivos (cada um contento 2 matrizes) e chamando o programa passando como parametro cada um desses arquivos
    (o tempo para quebrar o arquivo em vários não foi levado em conta).
      * Média dos 3 últimos tempos de execução: 183.33ms

    - No diretório matricesmultiplier3, está a versão paralela utilizando fork.
      * Média dos 3 últimos tempos de execução: 103.33ms

    - No diretório matricesmultiplier3, está a versão paralela utilizando c++11 threads.
      * Média dos 3 últimos tempos de execução: 102.33ms

