Programação Paralela - Trabalho 3
=================================
Daker Fernandes <dakerfp@gmail.com>; Emiliano Firmino <emiliano.firmino@gmail.com>

Questão:
--------
Do livro AMP, devem ser feitos (no mínimo) os seguintes exercícios:

*Capítulo 1*. 1, 2, 6, 8

__Exercício 1__: The dining philosophers problem was invented by E. W.
Dijkstra, a concurrency pioneer, to clarify the notions of deadlock and
starvation freedom. Imagine five philosophers who spend their lives just
thinking and feasting. They sit around a circular table with five chairs. The
table has a big plate of rice.  However, there are only five chopsticks (in the
original formulation forks) available, as shown in Fig. 1.5. Each philosopher
thinks.  When he gets hungry, he sits down and picks up the two chopsticks that
are closest to him. If a philosopher can pick up both chopsticks, he can eat
for a while. After a philosopher finishes eating, he puts down the chopsticks
and again starts to think.

1. Write a program to simulate the behavior of the philosophers, where each
philosopher is a thread and the chopsticks are shared objects. Notice that you
must prevent a situation where two philosophers hold the same chopstick at the
same time.

2. Amend your program so that it never reaches a state where philosophers are
deadlocked, that is, it is never the case that each philosopher holds one chop-
stick and is stuck waiting for another to get the second chopstick.

3. Amend your program so that no philosopher ever starves.

4. Write a program to provide a starvation-free solution for any number of
philosophers n.

__Exercício 2__: For each of the following, state whether it is a safety or
liveness property. Identify the bad or good thing of interest.

1. Patrons are served in the order they arrive

__resposta__: safety.

2. What goes up must come down.

__resposta__: liveness.

3. If two or more processes are waiting to enter their critical sections, at
least one succeeds.

__resposta__: liveness.

4. If an interrupt occurs, then a message is printed within one second.

__resposta__: safety.

5. If an interrupt occurs, then a message is printed.

__resposta__: liveness.

6. The cost of living never decreases.

__resposta__: safety.

7. Two things are certain: death and taxes.

__resposta__: liveness.

8. You can always tell a Harvard man.

__resposta__: safety.

__Exercício 3__: In the producer–consumer fable, we assumed that Bob can see
whether the can on Alice’s windows ill is up or down. Design a
producer–consumer protocol using cans and strings that works even if Bob cannot
see the state of Alice’s can (this is how real-world interrupt bits work).

__Exercício 4__: You are one of P recently arrested prisoners. The warden, a
deranged computer scientist, makes the following announcement:

 You may meet together today and plan a strategy, but after today you will be in
 isolated cells and have no communication with one another.

 I have set up a “switch room” which contains a light switch, which is either on
 or off. The switch is not connected to anything.

 Every now and then, I will select one prisoner at random to enter the “switch
 room.” This prisoner may throw the switch (from on to off, or vice-versa), or
 may leave the switch unchanged. Nobody else will ever enter this room.

 Each prisoner will visit the switch room arbitrarily often. More precisely, for
 any N, eventually each of you will visit the switch room at least N times.

 At any time, any of you may declare: “we have all visited the switch room at
 least once.” If the claim is correct, I will set you free. If the claim is
 incorrect, I will feed all of you to the crocodiles. Choose wisely!

* Devise a winning strategy when you know that the initial state of the switch
  is off.

* Devise a winning strategy when you do not know whether the initial state of
  the switch is on or off.

Hint: not all prisoners need to do the same thing.

__Exercício 5__: The same warden has a different idea. He orders the
prisoners to stand in line, and places red and blue hats on each of their
heads. No prisoner knows the color of his own hat, or the color of any hat
behind him, but he can see the hats of the prisoners in front. The warden
starts at the back of the line and asks each prisoner to guess the color of his
own hat. The prisoner can answer only “red” or “blue.” If he gives the wrong
answer, he is fed to the crocodiles. If he answers correctly, he is freed. Each
prisoner can hear the answer of the prisoners behind him, but cannot tell
whether that prisoner was correct.

The prisoners are allowed to consult and agree on a strategy beforehand (while
the warden listens in) but after being lined up, they cannot communicate any
other way besides their answer of “red” or “blue.”

Devise a strategy that allows at least P − 1 of P prisoners to be freed.

__Exercício 6__: Use Amdahl’s law to answer the following questions:

* Suppose the sequential part of a program accounts for 40% of the program’s
  execution time on a single processor. Find a limit for the overall speedup
  that can be achieved by running the program on a multiprocessor machine.

__resposta__:

.Porção Sequencial
  (1 - p) = 0.4

.Porção Paralelizável
  p = 0.6

.Tempo do Programa pela Lei de Amdahl's
  T = (1 - p) + p/n

.Aplicando o Limite para N -> Infinito, P/N -> 0
  T = (1 - p)

.Aplicando a razão (N -> Infinito)
S = 1 / [(1 - p) + p/n] = 1 / (1 - p) = 1 / 0.4 = 2.5

Portanto o ganho máximo é 2.5x do tempo em máquina uniprocessador.

* Now suppose the sequential part accounts for 30% of the program’s computation
  time. Let sn be the program’s speedup on n processes, assuming the rest of the
  program is perfectly parallelizable. Your boss tells you to double this
  speedup: the revised program should have speedup s′n > sn/2. You advertise for
  a programmer to replace the sequential part with an improved version that runs
  k times faster. What value of k should you require?

* Suppose the sequential part can be sped up three-fold, and when we do so, the
  modified program takes half the time of the original on n processors. What
  fraction of the overall execution time did the sequential part account for?
  Express your answer as a function of n.

__Exercício 7__: Running your application on two processors yields a speedup
of S2. Use Amdahl’s Law to derive a formula for Sn, the speedup on n
processors, in terms of n and S2.

__Exercício 8__:You have a choice between buying one uniprocessor that
executes five zillion instructions per second, or a ten-processor
multiprocessor where each processor executes one zillion instructions per
second. Using Amdahl’s Law, explain how you would decide which to buy for a
particular application.
