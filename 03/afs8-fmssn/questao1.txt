
Exercise 21. Explain why quiescent consistency is compositional.

A quiescencia se baseia no princípio de corretude onde as execuções concorrentes se comportam como 

execuções sequenciais. A corretude da propriedade P é composicional se, sempre que cada objeto no sistema 

satisfaça P, o sistema como um todo satisfaz P.

-----------------------------------------------------------------------------------------

Exercise 23. Give an example of an execution that is quiescently consistent but not sequentially 

consistent, and another that is sequentially consistent but not quiescently consistent.

Sequencial e Quiescente consistency possuem a mesma propriedade não bloqueante, onde qualquer chamada a 

um metodo total pode ser sempre completada. A diferença entre ambos é que no segundo, a ordem de 

recebimento das resposta não importa e é composicional, e o primeiro, não é afetado pelo período de 

quiescencia não sendo composicional.

Quiescencia - a recuperação de um arquivo pela rede.
Sequencial - a recuperação de um streaming de vídeo em tempo real.

-----------------------------------------------------------------------------------------

Exercise 24. For each of the histories shown in Figs. 3.13 and 3.14, are they quiescently consistent? 

Sequentially consistent? Linearizable? Justify your answer.

3.13 - Inicialmente Linearizable, pois a leitura r.read(1) ocorre ao mesmo tempo que a escrita r.write

(1), porém se inicia um pouco depois, considerando o momento de alteração do objeto dentro da chamada 

(sub-historia), porém o r.read(2) ocorre após o r.write(2), caracterizando uma consistencia Sequencial 

neste ponto.

3.14 - Sequencial, observando o momento de execução das chamadas na thread B (r.write(1) e r.read(1)), 

porém Quiescente a partir do momento que o retorno é 1, e o retorno após a escrita r.write(2) nã é 

retornado. Na linearização se um método precede outro, a chamada anterior deve ter efeito efeito antes da 

próxima chamada, o que nâo acontece nesse caso.

-----------------------------------------------------------------------------------------

Exercise 25. If we drop condition L2 from the linearizability definition, is the resulting property the 

same as sequential consistency? Explain.

Não , porque a segunda condição diz que se a chamada a um método precede outra na história original, 

então a ordem  deve ser preservada na linearização.

-----------------------------------------------------------------------------------------

27. Give an example showing that this implementation is not linearizable.

Na linearização se um método precede outro, a chamada anterior deve ter efeito efeito antes da próxima chamada, o que nâo acontece nesse caso. Executando 10 threads em cima da implementação a apresentada no livro, o método dequeue não retorna imediatamente o efeito do enqueue chamado anteriormente. Segue um exemplo de amostra.

Thread-6 enq 7
Thread-0 enq 1
Thread-2 enq 3
Thread-1 enq 2
Thread-1 deq 6
Thread-8 enq 9
Thread-8 deq 5
Thread-4 enq 5
Thread-3 enq 4
Thread-5 enq 6
Thread-7 enq 8
Thread-7 deq 2
Thread-5 deq 3
Thread-3 deq 1
Thread-4 deq 4
Thread-9 enq 10
Thread-2 deq 7
Thread-0 deq 8
Thread-6 deq 9
Thread-9 deq 10


------------------------------------------------------------------------------------------

28. . Consider the class shownin Fig. 3.16.According towhat you have been

told about the Java memory model, will the readermethod ever divide by zero?


Não.
