# Parametros:
	* 10 threads
	* 10 contadores
	* nenhuma contenção
	* número de incrementos por thread: 5000000

# Soma das execuções usando CLHOptimizedQueueLock
>>> a = 1.671 + 1.899 + 1.550 + 1.813 + 1.769
>>> a
8.702

# Soma das execuções usando SafeLock (modificado de CLHOptimizedQueueLock)
>>> b = 4.124 + 3.816 + 4.134 + 3.648 + 3.909
>>> b
19.631

# Soma das execuções usando ReentrantLock
>>> c = 1.090 + 1.135 + 1.195 + 1.182 + 1.090
>>> c
5.692

# SafeLock tornou-se 2.256x mais lento em relação a CLHOptimizedQueueLock com a detecção de Deadlock para 2 travas
>>> b/a
2.255918179728798

# SafeLock tornou-se 3.449x mais lento em relação a ReentrantLock
>>> b/c
3.4488756148981023

# Modificando de ConcurrentHashMap para HashMap em SafeLock (sem garantia de corretude)
>>> d = 3.199 + 3.914 + 3.644 + 3.981 + 4.047
>>> d
18.785

# Ainda sim SafeLock tornou-se 3.30x mais lento que ReentrantLock
>>> d/c
3.30024595924104


=====================

# Parametros:
	* 50 threads
	* 10 contadores
	* contenção: 5 threads por contador
	* número de incrementos por thread: 200000

# Soma das execuções usando CLHOptimizedQueueLock
>>> a = 3.199 + 3.914 + 3.644 + 3.981 + 4.047
>>> a
18.785

# Soma das execuções usando SafeLock (modificado de CLHOptimizedQueueLock)
>>> b = 5.896 + 6.834 + 5.894 + 6.567 + 5.694
>>> b
30.885

# Soma das execuções usando ReentrantLock
>>> c = 0.337 + 0.331 + 0.354 + 0.359 + 0.332
>>> c
1.713

# SafeLock tornou-se 1.644x mais lento em relação a CLHOptimizedQueueLock com a detecção de Deadlock para 2 travas
>>> b/a
1.6441309555496408

# SafeLock tornou-se 18x mais lento em relação a ReentrantLock
>>> b/c
18.029772329246935

===================
OUTRA IMPLEMENTAÇÃO
===================

Utilizando uma implementação modificada de ReentrantLock para detecção de Deadlocks, os resultados foram bem melhores:

Parametros: 10 threads, 10 contadores, sem contenção, 1000 incrementos por thread

# Últimas execuções usando ReentrantLock modificado
>>> a = 0.125 + 0.134 + 0.138 + 0.142 + 0.126
>>> a
0.665

# Últimas execuções usando ReentrantLock original
>>> b = 0.093 + 0.091 + 0.091 + 0.096 + 0.099
>>> b
0.47

# ReentrantLock modificado ficou 1.41x mais lento apenas
>>> a/b
1.4148936170212767

Parametros: 50 threads, 10 contadores, contencao de 5 threads por contador, 1000 incrementos por thread

# Últimas execuções usando ReentrantLock modificado
>>> c = 0.204 + 0.206 + 0.211 + 0.210 + 0.200

# Últimas execuções usando ReentrantLock original
>>> d = 0.127 + 0.121 + 0.123 + 0.139 + 0.133

# ReentrantLock modificado ficou 1.60x mais lento
>>> c/d
1.603421461897356

Parametros: 100 threads, 10 contadores, contencao de 10 threads por contador, 1000 incrementos por thread

# Últimas execuções usando ReentrantLock modificado
>>> e = 0.233 + 0.273 + 0.255 + 0.298 + 0.257

# Últimas execuções usando ReentrantLock original
>>> f = 0.142 + 0.140 + 0.126 + 0.145 + 0.116

# ReentrantLock modificado ficou 1.96x mais lento
>>> e/f
1.9671150971599398
