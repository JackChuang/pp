1 e 2)

A "melhor implementação" para travas com backoff foi utilizando parâmetros 30ms e 120ms para os tempos min e máximo de backoff
Como se pode observar nos dados abaixo a trava com backoff se comportou melhor que todas as outas implementações.
Variando a política de incremento do backoff pode-se ver que a diferença não foi significativa e a melhor implementação depende do número de threads do programa, por exemplo, a política aditiva foi melhor que a exponencial para 10 threads, mas pior para 50.
De maneira geral, a trava reentrant foi pior que a implementação de backoff, mas melhor que TAS simples (sem backoff) e que a implementação de fila.
Por sua vez, a implementação de fila foi pior que todas as outras.

Analisando os tempos de execução para o critério de parada de 1000 incrementos (por thread) podemos ver que as travas TAS simples (sem backoff) e Reentrant se sobressaíram em relação às outras travas, não concordando com o rank estabelecido utilizando o crtiério de parada "2 minutos".
Mais uma vez, a trava de fila foi consistentemente pior que as outras travas.

Todos os dados podem ser encontrados no anexo da questão.
As execuções foram realizadas variando os seguintes critérios:
- Tipo de trava: "backoff", "tas", "reentrant" e "queue"
- Número de threads: 10, 50, 100 e 200
- Política de incremento: Aditiva ou exponencial (válida somente para travas "backoff")
- Critério de parada: Tempo ("2 minutos") ou quantidade de incrementos ("1000 por thread")
Para a maior parte dos benchmarks, houve uma pausa de 20s entre cada um

Notas adicionais:
Apesar de não estar disponível nos dados abaixo, a reutilização de objectos Backoff na trava backoff possibilita um ganho significativo em performance,
para o critério de parada "2 min" a quantidade de incrementos sem reutilização chegava a pouco mais da metade do valor obtido com reutilização.

Max mean (mean of means) lbackoff-t10-stime-iadd-c10-min30-max120.txt 354184357.82
Min mean (mean of means) lqueue-t100-stime-iexp-c10-min30-max120.txt 65.204
Max totals mean (mean of totals) lbackoff-t10-stime-iadd-c10-min30-max120.txt 3541843578.2
Min totals mean (mean of totals) lqueue-t100-stime-iexp-c10-min30-max120.txt 6520.4
Rank by means of means (descendant)
lbackoff-t10-stime-iadd-c10-min30-max120.txt       354184357.82
lbackoff-t10-stime-iexp-c10-min30-max120.txt       340958223.84000003
lreentrant-t10-stime-iexp-c10-min30-max120.txt     259184950.54000002
ltas-t10-stime-iexp-c10-min30-max120.txt           124646963.4
lbackoff-t50-stime-iexp-c10-min30-max120.txt       67281073.32000001
lbackoff-t50-stime-iadd-c10-min30-max120.txt       66474137.392
lreentrant-t50-stime-iexp-c10-min30-max120.txt     52900536.107999995
lbackoff-t100-stime-iadd-c10-min30-max120.txt      33362104.296000004
lbackoff-t100-stime-iexp-c10-min30-max120.txt      32482571.132
lreentrant-t100-stime-iexp-c10-min30-max120.txt    26952821.585999995
lbackoff-t200-stime-iexp-c10-min30-max120.txt      15924561.981999999
lbackoff-t200-stime-iadd-c10-min30-max120.txt      15185991.962000001
lreentrant-t200-stime-iexp-c10-min30-max120.txt    13128506.071
ltas-t50-stime-iexp-c10-min30-max120.txt           5435498.256
ltas-t100-stime-iexp-c10-min30-max120.txt          1434210.37
ltas-t200-stime-iexp-c10-min30-max120.txt          374232.446
lqueue-t10-stime-iexp-c10-min30-max120.txt         6109.32
lqueue-t50-stime-iexp-c10-min30-max120.txt         187.1
lqueue-t100-stime-iexp-c10-min30-max120.txt        65.204


Rank by mean of totals (descendant)
lbackoff-t10-stime-iadd-c10-min30-max120.txt       3541843578.2
lbackoff-t10-stime-iexp-c10-min30-max120.txt       3409582238.4
lbackoff-t50-stime-iexp-c10-min30-max120.txt       3364053666.0
lbackoff-t100-stime-iadd-c10-min30-max120.txt      3336210429.6
lbackoff-t50-stime-iadd-c10-min30-max120.txt       3323706869.6
lbackoff-t100-stime-iexp-c10-min30-max120.txt      3248257113.2
lbackoff-t200-stime-iexp-c10-min30-max120.txt      3184912396.4
lbackoff-t200-stime-iadd-c10-min30-max120.txt      3037198392.4
lreentrant-t100-stime-iexp-c10-min30-max120.txt    2695282158.6
lreentrant-t50-stime-iexp-c10-min30-max120.txt     2645026805.4
lreentrant-t200-stime-iexp-c10-min30-max120.txt    2625701214.2
lreentrant-t10-stime-iexp-c10-min30-max120.txt     2591849505.4
ltas-t10-stime-iexp-c10-min30-max120.txt           1246469634.0
ltas-t50-stime-iexp-c10-min30-max120.txt           271774912.8
ltas-t100-stime-iexp-c10-min30-max120.txt          143421037.0
ltas-t200-stime-iexp-c10-min30-max120.txt          74846489.2
lqueue-t10-stime-iexp-c10-min30-max120.txt         61093.2
lqueue-t50-stime-iexp-c10-min30-max120.txt         9355.0
lqueue-t100-stime-iexp-c10-min30-max120.txt        6520.4

Rank by mean times (ascendant)
ltas-t10-scount-iexp-c10-min30-max120              128.36651999999998
lreentrant-t10-scount-iexp-c10-min30-max120        128.75294
lreentrant-t50-scount-iexp-c10-min30-max120        141.52962
lreentrant-t100-scount-iexp-c10-min30-max120       142.43104
lbackoff-t10-scount-iadd-c10-min30-max120          160.28266000000002
ltas-t50-scount-iexp-c10-min30-max120              162.75448
lbackoff-t10-scount-iexp-c10-min30-max120          166.51586
ltas-t100-scount-iexp-c10-min30-max120             206.31518
lbackoff-t50-scount-iexp-c10-min30-max120          207.05965999999998
ltas-t200-scount-iexp-c10-min30-max120             249.08602000000002
lbackoff-t50-scount-iadd-c10-min30-max120          266.15477999999996
lbackoff-t100-scount-iexp-c10-min30-max120         273.52336
lbackoff-t100-scount-iadd-c10-min30-max120         294.28108
lbackoff-t200-scount-iexp-c10-min30-max120         483.17353999999995
lbackoff-t200-scount-iadd-c10-min30-max120         1199.61446
lreentrant-t200-scount-iadd-c10-min30-max120       10752.699039999998
lreentrant-t200-scount-iexp-c10-min30-max120       11261.723600000001
lqueue-t10-scount-iadd-c10-min30-max120            12144.31321
lqueue-t10-scount-iexp-c10-min30-max120            14186.176370000001
lqueue-t50-scount-iexp-c10-min30-max120            402522.70206
lqueue-t50-scount-iadd-c10-min30-max120            701651.1239
lqueue-t100-scount-iexp-c10-min30-max120           12279645.192133332

3)
A primeira implementação se comporta como uma trava TTAS comum, visto que a cada
vez que o contador é incrementado é necessário o reenvio de mensagens pelo bus
para obter um novo valor.

A segunda implementação reduz o tráfego na bus visto que cada thread lê um valor
apenas uma vez (thread i lê o valor de b[i+1]) e escreve apenas 2 vezes, quando
a thread seguinte chega e sai da barreira respectivamente.

Espera-se que a primeira abordagem tenha uma performance um pouco melhor quando
a carga é pequena, enquanto a segunda abordagem deve ser superior caso a carga
seja grande.

4) Os experimentos podem ser encontrados na pasta 04, contendo um script para
computar os resultados e o código de ambas as implementações de hashed deque.

O experimento foi o seguinte: Foram considerados buckets de tamanho 2,4,8 e 16.
Em todos os casos haviam 8 threads tentando inserir elementos, 4 na esquerda e 4
na direita, e 2 threads removendo elementos, uma na direita e outra na esquerda.
Uma implementação utilizando uma trava, enquanto a outra utiliza 2. Cada
experimento durava 10 segundos e ao final contadores locais reportavam o número
de inserções e remoções de cada thread. Os resultados podem ser vistos em 
04/benchmark.txt. 

Pode-se perceber que houve uma pequena variação (~10%) de performance nos casos
com uma única trava, e o número de buckets não afetou muito o resultado. O
experimento também foi feito para 100 buckets mas o resultado foi parecido.
Acreditamos que isso acontece pois as threads "globais" da esquerda e da direita
são muito pesadas e serializam o acesso.


