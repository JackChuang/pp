Programação Paralela - Trabalho 12
==================================

- Daker Fernandes <dakerfp@gmail.com>
- Emiliano Firmino <emiliano.firmino@gmail.com>

Questão:
--------

[start=120]
120. Consider the simple lock-free queue for single enqueuer and
single dequeuer, described earlier in Chapter 3. The queue is
presented below.

[source, java, numbered]
--------------
class TwoThreadLockFreeQueue<T> {
  int head = 0, tail = 0;
  T[] items;

  public TwoThreadLockFreeQueue(int capacity) {
    head = 0; tail = 0;
    items = (T[]) new Object[capacity];
  }

  public void enq(T x) {
    while (tail - head == items.length) {}
    items[tail % items.length] = x;
    tail++;
  }

  public Object deq() {
    while (tail - head == 0) {}
    Object x = items[head % items.length];
    head++;
    return x;
  }
}
--------------

This queue is blocking, that is, removing an item from an empty queue or
inserting an item to a full one causes the threads to block (spin). The
surprising thing about this queue is that it requires only loads and stores and
not a more powerful read-modify-write synchronization operation. Does it
however require the use of a memory barrier? If not, explain, and if so, where
in the code is such barrier needed and why?

Nos métodos +enq()+ e +deq()+ logo abaixo do incremento de +head+ e +tail+ de forma
a propagar a alteração do atributo para a memória assim outras threads terem seus
valores atualizados.

[start=121]
121. Design a bounded lock-based queue implementation using an array instead of a linked list.

I) Allow parallelism by using two separate locks for head and tail.
II) Try to transform you algorithm to be lock-free. Where do you run into difficulty?

[source, java, numbered]
--------------
class ArrayUnboundedQueue<T> {
  Lock lockHead, lockTail;
  Condition notEmpty;
  Condition notFull;
  int head = 0, tail = 0;
  T[] items;

  public ArrayUnboundedQueue(int capacity) {
    head = 0; tail = 0;
    lockHead = new ReentrantLock();
    lockTail = new ReentrantLock();
    notEmpty = lockHead.newCondition();
    notFull = lockTail.newCondition();
    items = (T[]) new Object[capacity];
  }

  public void enq(T x) {
    tailLock.lock();
    try {
      while (tail - head == items.length) {
        notFull.await();
      }
      items[tail % items.length] = x;
      tail++;
      if (tail - head == 1)
        notEmpty.signal();
    } finally {
      tailLock.unlock();
    }
  }

  public Object deq() {
    headLock.lock();
    try {
      while (tail - head == 0) {
        notEmpty.await();
      }
      Object x = items[head % items.length];
      head++;
      if (tail - head == items.length - 1)
        notFull.signal();
      return x;
    } finally {
      headLock.unlock();
    }
  }
}
--------------

[start=122]
122. Consider the unbounded lock-based queue's +deq()+ method in Fig. 10.8. Is it necessary
to hold the lock when checking that the queue is not empty? Explain.

Sim, é necessário.
Caso contrário é possível que uma thread A ao chegar à linha 19 enquanto uma thread B verifica
que é possível (head.next != null). Em seguida a thread A remove o último elemento e a thread B
tenta remover o elemento sentinela.

[start=123]
123. In Dante's Inferno, he describes a visit to Hell. In a very recently discovered chapter,
he encounters five people sitting at a table with a pot of stew in the middle. Although each
one holds a spoon that reaches the pot, each spoon's handle is much longer than each person's
arm, so no one can feed him- or herself. They are famished and desperate.

Dante then suggest "why do not you feed one another?"
The rest of the chapter is lost.

I) Write an algorithm to allow these unfortunates to feed one another. Two or more people
may not feed the same person at the same time. Your algorithm must be, well, starvation-free.

II) Discuss the advantage and disavantage of your algorithm. Is it centralized, decentralized,
high or low in contention, determistic or randomized?

[start=124]
124. Consider the linearization points of the +enq()+ and +deq()+ methods of the lock-free queue:

I) Can we choose the point at which the returned value is read from a note as the linearization
point of succesful +deq()+?

II) Can we choose the linearization points of the +enq()+ method to be the point at which the +tail+
field is updated, possibly by other therads (consider if it is with the +enq()+'s execution interval)?
Argue your case.
