PP -Trabalho 11
===============

Jose Fernando <jfsc@cin.ufpe.br>;
Josino Rodrigues <jrn4@cin.ufpe.br>


Exercise 101
------------
Explain why the fine-grained locking algorithm is not subject to deadlock.

**Resposta:** Deadlock caracteriza-se pela dependênciacircular de um recurso compartilhado por threads. No caso do fine-grained locking, essa possibilidade é eliminada quando a aquisição das travas é sempre iniciada a partir do sentinela até o elemento final da lista (tail).
Outra característica é a identidade dos elementos baseada em um hash único distribuído em ordem crescente até o final da lista.

Exercise 102
------------
Explain why the fine-grained list's add() method is linearizable.

**Resposta:** Devido a composição do ponto de linearização (linha 7 e 13). As alterações só tem efeito após adquirir a trava do elemento com uma chave maior (hash). Após isso, as alterações causam efeito em todo o ecossistema de threads de forma consistente.

image:jfsc_jrn4/fglinear.png["fine-grained list's add()"]



Exercise 103
------------
Explain why the optimistic and lazy locking algorithms are not subject to deadlock.

**Resposta:** A abordagem dos 2 algorítmos garantem o progresso da mesma forma da fine-grained: A aquisição dos locks ocorre ao percorrer a lista a partir do sentinela.

No entanto, mesmo a chamada de um contains() partindo do último elemento enquanto as demais threads particem do sentinela, ocasionaria um deadlock.

Abaixo um exemplo de chamada com sucesso do método **add()**. Ela foi escolhida pelo pontos de linearização serem os mesmos:


image:jfsc_jrn4/Exe103Add.png[]
------------------
TS= Thread partindo do sentinela
TT= Thread partindo do tail
Aq= Aquisição do Lock
En= Indice de um elemento na lista a partir do E0(Sentinela)
--
//////////////////////////////////////////////////
Partindo do princípio que a Lista tem 4 elementos
(inclusive o sentinela e tail), observar o
resultado da prova de acordo com a linha 9 da Fig do exercicio
103
/////////////////////////////////////////////////

TS(AqE1)->TT(AqE2)
TS(AqE2)->TT(AqE1)

------------------


Exercise 105
------------
Provide the code for the contains() method missing from the fine-grained algorithm. Explain why your implementation is correct.

[source,java]
-------------------------
1.public boolean contains(T item) {
2.    Node last = null, pred = null, curr = null;
3.    int key = item.hashCode();
4.    head.lock();
5.    try {
6.      pred = head;
7.      curr = pred.next;
8.      curr.lock();
9.      try {
10.        while (curr.key < key) {
11.          pred.unlock();
12.          pred = curr;
13.          curr = curr.next;
14.          curr.lock();
15.        }
16.        return (curr.key == key);
17.      } finally {
18.        curr.unlock();
19.      }
20.    } finally {
21.      pred.unlock();
22.    }
23.  }
-------------------------
No código provido, os pontos de linearização (linhas 8, 11 e 14) são iguais àqueles encontrados no método de adição 'add()'. Deste modo, seguem a mesma ordem de aquisição de locks ao percorrerem a lista a partir do sentinela.

Exercise 106
------------
Is the optimistic list implementation still correct if we switch the order in which add() locks the pred and curr entries?

*Resposta:* Não. Uma outra thread pode chamar o `remove()` e uma dependência circular pode ser ocasionada.

[source,java]
-----------------------------------
1. public boolean remove(T item) {
2.   int key = item.hashCode();
3.   while (true) {
4.     Entry pred = this.head;
5.     Entry curr = pred.next;
6.     while (curr.key < key) {
7.       pred = curr; curr = curr.next;
8.     }
9.     pred.lock(); curr.lock();//Ordem de aquisição inversa àquela proposta no método add();
10.     try {
11.       if (validate(pred, curr)) {
12.         if (curr.key == key) {
13.           pred.next = curr.next;
14.           return true;
15         } else {
16.           return false;
17.         }
18.       }
19.     } finally {
20.       pred.unlock(); curr.unlock();
21.     }
22.   }
23. }
-----------------------------------

Exercise 108
------------
Show that in the optimistic algorithm, the add() method needs to lock only pred.

*Resposta*: Com a remoção de curr.lock do método 'add()', ha um risco de alteração no 'pred.next()'. No entato, ha um método de avaliação 'validate()' que garante que mesmo havendo uma remoção, o sistema continua consistente.

[source,java]
------------------
private boolean validate(Entry pred, Entry curr) {
   Entry entry = head;
   while (entry.key <= pred.key) {
     if (entry == pred)
       return pred.next == curr;//Nesse ponto pode-se identificar se pred.next foi removido ou não.
     entry = entry.next;
   }
   return false;
 }
------------------

Exercise 110
------------
Would the lazy algorithm still work if we marked a node as removed simply by setting its next field to null ? Why or why not? What about the lock-free algorithm?

*Resposta:* No caso do algoritmo Lazy, anular a flag 'marked' invalida o método 'validate()' e 'contains()' que dependem dessa marcação.

Exercise 112
------------
Your new employee claims that the lazy list?s validation method ( Fig. 9.16 ) can be simplified by dropping the check that pred.next is equal to curr . After all, the code always sets pred to the old value of curr , and before pred.next can be changed, the new value of curr must be marked, causing the validation to fail. Explain the error in this reasoning.

*Resposta:* Fig. 9. 15O

funcionário deve pensar nas seguintes possibildiades:
I) É possível que a Thread esteja percorendo elementos que já foram removidos. Assim, pred pode apontar para um elemento já removido
II)É possível que um novo elemento seja adicionado antes do atual pred.next. Deste modo, a validação não teria o status correto.

Exercise 115
------------
In the lock-free algorithm, if an add() method call fails because pred does not point to curr , but pred is not marked, do we need to traverse the list again from head in order to attempt to complete the call?
