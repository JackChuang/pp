========================
Capítulo 1
========================

1. Código na pasta "philosophers"

2.
    1. Safety. Bad thing: Eles serem servidos em desordem, não respeitando a hora de chegada.
    2. Liveness. Good thing: Voltar a seu estado inicial, dando idéia de seguir seu fluxo normal (não erro).
    3. Safety: Bad thing: Os dois processos entrarem na sua região crítica ao mesmo tempo.
    4. Safety: Bad thing: A mensagem demorar mais que 1 segundo para ser impressa.
    5. Liveness: Good thing: Mensagem ser impressa na tela dando a idéia de vivacidade do programa.
    6. Safety: Bad thing: O custo diminuir.
    7. Liveness: Good thing: Certeza que essas duas coisas sempre acontecem.
    8. Safety: Bad thing: Confundir um cara que não é de Harvard.

6.
    * Suppose the sequential part of a program accounts for 40% of the program’s execution time on a single processor.
      Find a limit for the overall speedup that can be achieved by running the program on amultiprocessor machine.

        Temos que, pela lei de Amdahl, o ganho de desempenho se dá pela função:

                 1
        S = ------------
            1 - p + p/n

        Como apenas 60% pode ser paralelizável:

                 1              5n
        S = ------------  => --------
            4/10 + 6/10n      2n + 3

        Com n tendendo ao infinito, o 3 que está sendo somado ao denominador torna-se desprezível e podemos simplicar o
        n no numerador e denominador, resultando num ganho de:

        S = 2.5

    * Now suppose the sequential part accounts for 30% of the program’s computation time. Let sn be the program's
      speedup on n processes, assuming the rest of the program is perfectly parallelizable. Your boss tells you to
      double this speedup: the revised program should have speedup sn > sn/2. You advertise for a programmer to replace
      the sequential part with an improved version that runs k times faster. What value of k should you require?

      Temos que, o ganho original é, com apenas 70% paralelizável:

                1              10n
      Sn = ------------  => --------
           3/10 + 7/10n      3n + 7

      Para dobrarmos o ganho teremos que multiplicar a parte não para paralelizável por um fator k, para deixá-la mais
      rápida:

                    1              2 *    10n          10n
      2Sn = ------------------ =>      -------- = -------------
            3k/10 + 1 - 3k/10n          3n - 7    3kn + 10 - 3k

      Onde, simplificando teremos no final:

           3n + 7 - 20
      k = -------------
            6(n - 1)

      O fator k dependerá do número de cores do processador, onde este deverá ser maior que 5.

8.
    A melhor escolha depende da natureza da aplicação que será executada.

    A lei de Amdahl diz que o ganho de desempenho em paralelizar uma aplicação é limitado pela parte da aplicação que,
    necessariamente, precisa ser executada sequencialmente.

    Segundo essa lei, em uma máquina com 10 processadores e uma aplicação onde 90% é possível paralelizar, o ganho de
    desempenho é de 5 vezes.

    Portanto, se mais de 90% da aplicação em questão for “paralelizavel”, a melhor escolha é o processador com dez
    núcleos onde cada um executa um zilhão de instruções por segundo. Caso contrário, a melhor escolha é o processador
    com um núcleo que processa cinco zilhões de instruções.

========================
Capítulo 2
========================

11.
    * Does this protocol satisfy mutual exclusion?

        Sim.

    * Is this protocol starvation-free?

        Não. O fluxo de execução descrito abaixo demonstra que a Thread A pode sofrer starvation.

        Thread A            Thread B
        ————————————————————————————————————————
        Linha 8
                        Linha 8
        Linha 9
                        Linha 9
        Linha 10
                        Linha 10
        Linha 11 (bloqueia)
                        Linha 11
        .
        .
        .
                        Linha 14

    * Is this protocol deadlock-free?

        Não. O fluxo de execução descrito abaixo demonstra que deadlock pode ocorrer.

        Thread A            Thread B
        ————————————————————————————————————————
        Linha 8
        Linha 9
        Linha 10
                        Linha 8
                        Linha 9 (bloqueia)
        Linha 11 (bloqueia)

13.
    No capítulo 1, foi provado que o Peterson Lock satisfaz a propriedade de exclusão mútua para duas threads, ou
    seja, se duas threads tentarem entrar na região crítica ao mesmo tempo, apenas uma conseguirá.
    No Tree Lock, cada nó é composto de um Peterson Lock e as folhas são compartilhadas por duas threads. Para uma
    thread entrar na sua região crítica ela precisa adquirir todos os locks da sua folha até o root node. Temos que,
    para qualquer nó da árvore sempre haverá no máximo duas threads tentando adquirir o lock.
    Caso o nó seja uma folha, ele terá as duas threads que foram alocadas para ele inicialmente. Caso não seja uma
    folha, ele terá as duas threads que conseguiram adquirir o lock nos seus nós filhos (apenas uma thread
    conseguirá adquirir o lock, visto que o Paterson Lock garante isso). Sendo assim, apenas uma thread conseguirá
    chegar ao root node por vez, visto que a cada nó atravessado uma thread será posta para esperar.

    Essa mesma generallização pode ser aplicada para as propriedades de Deadlock freedom e Starvation freedom.

15.
    A classe FastPathLock não provê exclusão mútual conforme demostrado no exemplo abaixo.

    Thread A            Thread B
    ————————————————————————————————————————
    Linha 7
                    Linha 7
    Linha 8
                    Linha 8
    Linha 9
                    Linha 9
                    (retorna)
    Linha 10
    Linha 11
    (retorna)
