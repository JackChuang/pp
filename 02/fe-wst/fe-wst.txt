Trabalho 02:

=====================================================

Questão 01: arquivos em java!


=====================================================


Questão 02: Safety or Liveness property?


	A safety property asserts that nothing bad happens.

	A liveness property asserts that something good eventually happens.


1. Safety - A parte boa é que o primeiro sempre será servido primeiro, mas o último pode demorar muito para ser servido. E se a ordem não for seguida algo de ruim pode acontecer.

2. Liveness - Garante que em algum momento ele terá que descer.

3. Liveness - Garante que em algum momento a thread irá ter sucesso.

4. Safety - Existe uma restrição quanto ao tempo de 1 segundo para imprimir a mensagem. Se isso não acontecer algo de ruim pode ocorrer.

5. Liveness - Assim que a interrupção ocorre, a mensagem é impressa é um algum momento (tempo finito).

6. Safety – Considerando que o custo de vida abaixar é ruim, então é safety, pois ele nunca vai ocorrer.

7. Liveness- Garante que as duas coisas irão ocorrer em algum momento.

8. Safety - Você sempre pode reconhecer um homem de Harvard.



=====================================================


Questão 6:


a) 
p = 0.6

S = 1 / (1 - 0.6) + (0.6/n) = 1 / 0.4 + (0.6/n)

lim(->00) = 1 / 0.4 + (0.6 / n) = 1 / 0.4 = 2.5


b) 
p = 0.7
A/B = 2
A = 0.3 + (0.7 / n)
B = 0.3k + (0.7 / n)

2 = [0.3 + (0.7 / n)] / [0.3k + (0.7 / n)]
2 * 0.3k + (0.7 / n) = 0.3 + (0.7 / n)
0.6k + (1.4 / n) = 0.3 + (0.7 / n)
0.6k = 0.3 - (0.7 / n)

k = 0.3n - 0.7 / 0.6n



c)
A = M + (1 - M) / n 
B = (M / 3) + (1 - M) / n
A/B = 2

2 * [ M/3 + (1-M)/n] = M + (1-M)/n
2M/3 + (2-2M)n = M + (1-M)/n
M - 2M/3 = (2-2M)/n - (1+M)/n
M/3 = (1-M)/n
M/3 + M/n = 1/n
M (1/3 + 1/n) = 1/n
M [(n+3)/n] = 1/n
M = 1 / n[(n+3)/3n)]

M = 3 / (n + 3) 

=====================================================


Questão 8:


Considerando um programa em que p=0.4 (parte paralela do código).

Para n = 1:
		s = 1 / 0.6 + 0.4 = 1
		5z de instruções em 1s

Para n = 10:
		s = 1 / 0.6 + 0.04 = 1.56
		1.56z de instruções em 1s por processador


Como o desempenho da aplicação depende do quanto é possível paralelizar, neste caso seria mais viável comprar uma máquina single core, pois é necessário que a aplicação seja quase 90% paralelizavel para ser mais vantagem comprar o multiprocessadores.


=====================================================


Questão 11:


A) Sim. Assuma que o método não garanta exclusão mútua, logo as threads A e B podem entrar ao mesmo tempo nas regiões críticas.

prova por contradição:

1. writeA (turn = A) -> readA (busy == false) -> writeA (busy = true) -> readA (turn = A) -> CSA
2. writeB (turn = B) -> readB (busy == false) -> writeA (busy = true) -> readB (turn = B) -> CSB


Já que A entrou na CS: 

3. readA (turn = A) -> writeB (turn = B)

Já que B entrou na CS: 

4. readB (turn = B) -> writeA (turn = A)

De 1 e 3, inferimos:

5. writeA (turn = A) -> readA (turn = A) -> writeB (turn = B)

De 2 e 5, inferimos:

6. writeA (turn = A) -> readA (turn = A) -> writeB (turn = B) -> readB (turn = B)

De 4 e 6, inferimos:

7. writeA (turn = A) -> readA (turn = A) -> writeB (turn = B) -> readB (turn = B) -> writeA (turn = A)

Provado por contradição!!


B) Não, pois como acontece deadlock, logo ela não é livre de starvation.


C) 


=====================================================


Questão 13: não conseguimos fazer.


=====================================================


Questão 15:

Não garante exclusão mútua, pois se a Thread B entrar no while antes da Thread A Chamar o unlock, tanto a thread A quanto a Thread B estarão acessando a região critica.


=====================================================