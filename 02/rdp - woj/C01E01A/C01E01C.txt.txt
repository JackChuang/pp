package C01E01.C01E01C;
import java.util.concurrent.atomic.AtomicBoolean;

public class C01E01C {
	public C01E01C() {
	
		Talher[] talheres = new Talher[5];
		Filosofo[] filosofos = new Filosofo[5];
		
		for (int i = 0; i < talheres.length; i++) {
			talheres[i] = new Talher(i);
		}
				
		filosofos[0] = new Filosofo("Socrates", talheres[0], talheres[1]);
		filosofos[1] = new Filosofo("Aristoteles", talheres[1], talheres[2]);
		filosofos[2] = new Filosofo("Platao", talheres[2], talheres[3]);
		filosofos[3] = new Filosofo("Rene", talheres[3], talheres[4]);
		filosofos[4] = new Filosofo("Valesca", talheres[4], talheres[0]);
		
		for (int i = 0; i < filosofos.length; i++) {
			filosofos[i].start();
		}
	}
	public static void main(String[] args) {
		new C01E01C();
	}
}

class Filosofo extends Thread{
	String nome;
	Talher[] talheres = new Talher[2];
	boolean pegouMenorID = false, pegouMaiorID = false;

	public Filosofo(String nome, Talher esquerda, Talher direita) {
		if(esquerda.id < direita.id){
			talheres[0] = esquerda;
			talheres[1] = direita;
		}
		else{
			talheres[0] = direita;
			talheres[1] = esquerda;
		}
		this.nome = nome;
	}

	@Override
	public void run(){
		while(true){
			
			if(talheres[0].compareAndSet(false, true)){
				pegouMenorID = true;
				System.out.println("Filosofo " + nome + " pegou talher de menorID. ID#"+talheres[0].id);
			}
			if(pegouMenorID && talheres[1].compareAndSet(false, true)){
				pegouMaiorID = true;
				System.out.println("Filosofo " + nome + " pegou talher de maiorID. ID#"+talheres[1].id);
			}
			if(pegouMaiorID && pegouMenorID){
				System.out.println("FILOSOFO " + nome.toUpperCase() + " COMENDO");
				synchronized (this) {
					try {
						this.wait(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				System.out.println("Filsofo " + nome + " largou talheres. ID#"+talheres[0].id + " ID#"+talheres[1].id);
				this.pegouMenorID = false; this.pegouMaiorID = false;
				talheres[0].getAndSet(false); talheres[1].getAndSet(false);
				synchronized (this) {
					try {
						this.wait(100);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}
}

class Talher extends AtomicBoolean{

	/**
	 * 
	 */
	private static final long serialVersionUID = 6879043153076030902L;

	int id;
	
	public Talher(int id) {
		this.getAndSet(false);
		this.id = id;
	}
}