1. 1 - 0.6 + (0.6 / n)
   0.4 + (0.6 / n)
   (0.4n + 0.6) / n

   S = 1 / [(0.4n + 0.6) / n]
   S = n / (0.4n + 0.6)

2. [ 0.3 + (0.7 / n) ] / [ 0.3k + (0.7 / n) ] = 2
   0.3 + (0.7 / n) = 0.6k + (1.4 / n)
   0.6k = 0.3 + (0.7 / n) - (1.4 / n)
   0.6k = 0.3 - (0.7 / n)
   0.6k = (0.3n - 0.7) / n
   k = (0.3n - 0.7) / 0.6n

   Para k < 3, é impossível, pois os 30% correspondente da função M, mesmo se removidos, não
   conseguem melhorar a performance em duas vezes. k é o fator multiplicativo necessário para
   se alcançar tal performance. Em um processador 3-cores, é necessário reduzir o custo de M em
   cerca de 89%, enquanto que em um processador 6-cores, apenas cerca de 70%. Valores extraidos
   aplicando a função encontrada na resolução acima:

   >>> x = lambda y: (0.3*y - 0.7) / (0.6*y)
   >>> x(1)
   -0.6666666666666666
   >>> x(2)
   -0.08333333333333331
   >>> x(3)
   0.11111111111111109
   >>> x(4)
   0.20833333333333334
   >>> x(5)
   0.26666666666666666
   >>> x(6)
   0.3055555555555555

3. [ M + (1 - M) / n ] / [ (M / 3) + (1 - M) / n ] = 2
   M + (1 - M) / n = (2M / 3) + (2 - 2M) / n
   M - (2M / 3) = (2 - 2M) / n - (1 - M) / n
   M / 3 = (1 - M) / n
   nM = 3 - 3M
   nM + 3M = 3
   (n + 3)M = 3
   M = 3 / (n + 3)