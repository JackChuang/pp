trabalho 02
===========

2.


1. Patrons are served in the order they arrive. (liveness) 
2. What goes up must come down. (safety) (good - don't go up forever)
3. If two or more processes are waiting to enter their critical sections, at least one succeeds.(safety) (good - at least one...)
4. If an interrupt occurs, then a message is printed within one second.(safety) (good - time response constraint)
5. If an interrupt occurs, then a message is printed.(liveness) (bad - how many time?)
6. The cost of living never decreases.(liveness) (bad - increase of living cost)
7. Two things are certain: death and taxes. (liveness) (bad - taxes / death - depends upon viewpoint)
8. You can always tell a Harvard man. (safety) (good)


=====================================

6. Lei de Amdahl: 1 / [1 - P + (P/N)]
6.1. Seja M=0.4, e assumindo que M é a única parte não-paralelizável do programa, temos:
 P = 0.6
 1 / [0.4 + (0.6/N)] como o speedup máximo.

 Limite para N threads:
 lim          1/[0.4 + (0.6/N)] = 1/0.4 = 10/4 = 2.5
 N->infinito


6.2. M=0.3; P=0.7
     Achar 'x' tal que: [0.3 + (0.7/N)]/[(0.3/x) + (0.7/N)] = 2

     0.3 + (0.7/N) = (0.6/x) + (1.4/N)
     0.3 - (0.7/N) = 0.6/x
     (0.3N - 0.7/N) = 0.6/x
     Logo, x = 0.6N / (0.3N-0.7)

6.3. M=1-P; P=1-M
     Achar o valor de M, tal que: 

     M/3 + (1-M)/N = [M + (1-M)/N]/2

     2M/3 + (2-2M)/N = M + (1-M)/N

     2M/3 + (1-M)/N = M 

     (2MN + 3 - 3M) / 3N = M => 2MN + 3 - 3M = 3MN
   
     3 - 3M = MN => MN + 3M = 3 => M (N+3) = 3

     M = 3/(N+3)

=======================
8.   1 uniprocessador com 5zil. IPS
     10 multiprocessadores com 1 zil. IPS cada.

     Qual é a quantidade mínima de paralelismo para o multiprocessador ter o mesmo desempenho do uni?

     1 / [1 - P + (P / 9)] = 5 
     1 / [(9 - 9P + P) / 9] = 5 => 9/(9-9P+P) = 5
     P - 9P = (9/5) - 9 => -8P = (9/5) - 9
     8P = 9-9/5 => P = 7.2 / 8 => P - 0.9

     Ou seja, para conseguir o mesmo desempenho com o multiprocessador, o programa tem que ser 90% paralelizável.
    

=======================
11)
11.1. Mutual Exclusion.

Sim, há garantia de exclusão mútua. Não há como duas threads terminarem o método "lock()" e entrarem na região crítica juntas, dado a necessidade de "turn" só poder ser igual a uma delas ao mesmo tempo que "busy" seja true. Como é checado o "while(turn!=me)" logo após true ser atribuído a "busy", a thread que não for igual ficará travada no primeiro laço.

11.2. Starvation

Não há garantias de uma Thread conseguir adquirir a trava. Tudo depende da ordem de execução de "turn=me". A qualquer momento, uma thread que chegou à avaliação de "while(turn!=me)" pode ter o valor de "turn" alterado, e voltar ao começo do laço. Como não há idéia de ordenamento, só depende-se do escalonador, isso pode ocorrer infinitas vezes, e a thread nunca entrar na região crítica.

Também (spoiler da próxima alternativa) não pode ser starvation-free pois não é deadlock-free.

11.3. Deadlock

Não é deadlock-free. Como entrar em deadlock com 2 threads.

Thread1:
    turn=me; //me == 1
    while(busy); //false, sai do laço
Quase ao mesmo tempo:
Thread2:
    turn=me; //me == 2
    while(busy); //false, sai do laço
Em seguida:
Thread1:
    busy=true;
    while(turn!=me); //true, pois 2 != 1, volta ao começo do laço.
    turn=me; //me == 1
Logo em seguida:
Thread2:
    busy=true;
    while(turn!=me); //true, pois 1 != 2; volta  ao começo do laço.


A partir deste ponto, busy == true, todas as threads ficam presas no primeiro laço.




=======================
13) 


=======================
15) Falso.

Exclusão mútua. Duas threads podem conseguir entrar na região crítica ao mesmo tempo. Basta ambas saírem do laço "while(y!=-1){}" simultaneamente, enquanto uma delas tem seu id gravado em "x". A que não tem o id gravado invocará "lock.lock();" e seguirá adiante, enquanto a outra simplesmente seguirá adiante.

Starvation-freedom. Ainda também não cobrem starvation-freedom, dado que uma thread pode ficar presa no "while(y!=-1){}" por tempo indeterminado, caso o outras threads tenham melhor sorte no escalonamento para entrarem na região crítica.




