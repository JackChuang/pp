Universidade Federal de Pernambuco
Centro de Informática
Mestrado em Ciência da Computação
IN0984

Dupla:  Gert Müller (gumn) e Larissa Falcão (lctf)

Trabalho 02

————————————
Capítulo 01
————————————

- Exercício 1

package exercise1;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

class Chopsticks {

    private static int cnt = 0;
    private int num = cnt++;
    
    @Override
    public String toString() {

  return "Chopsticks" + num;
    }
}
———
class Philosopher extends Thread {

    private static Random rnd = new Random();
    private static int cnt = 0;
    private int num = cnt++;
    private Chopsticks leftChopsticks;
    private Chopsticks rightChopsticks;
    static int waiting = 0;

    public Philosopher(Chopsticks left, Chopsticks right) {
  		leftChopsticks = left;
  		rightChopsticks = right;
  		start();
    }

    public void think() {
		System.out.println(this + " is thinking");
		if (waiting > 0) {
		try {
			sleep(rnd.nextInt(waiting));
		} catch (InterruptedException e) {
			throw new RuntimeException(e);
}

  }
    }

    public void eat() {
    synchronized (leftChopsticks) {


System.out.println(this + " has " + this.leftChopsticks + " Waiting for " + this.rightChopsticks);
synchronized (rightChopsticks) {
    System.out.println(this + " eating");
}

  }
    }

    @Override
    public String toString() {

  return "Philosopher " + num;
    }

    @Override
    public void run() {

  while (true) {

think();

eat();

  }
    }
}
—————
public class DiningPhilosophers {
	private static boolean gotoDeadLock =true;
	public static void main(String[] args) {
	Philosopher[] phil = new Philosopher[10];
	Philosopher.waiting = 8;
	Chopsticks left = new Chopsticks(), right = new Chopsticks(), first = left;
	int i = 0;
	while (i < phil.length - 1) {
		phil[i++] = new Philosopher(left, right);
		left = right;
		right = new Chopsticks();
	}
	if (gotoDeadLock) {
		phil[i] = new Philosopher(left, first);
	} 
	else {
		phil[i] = new Philosopher(first, left);
	}
	if (args.length >= 4) {
		int delay = 3;
		if (delay != 0) {
			Timeout timeout = new Timeout(delay * 1000, "Timed out");
		}
	}
	}
}
————
public class Timeout extends Timer {
	public Timeout(int delay, final String msg) {
	super(true); 
	schedule(new TimerTask() {

@Override

public void run() {
    System.out.println(msg);
    System.exit(0);
}

  } delay();
    }
}


- Exercício 2

1.Safety. Bad thing= unordered server 
2.Safety. Good thing= everything comes down
3.Liveness. Good thing= at least one succeeds 
4.Safety. Good thing= a message is printed within one second
5.Liveness. Good thing= a message is printed
6.Safety. Bad thing= cost of living never decreases
7.Liveness. Good thing= death and taxes
8.Safety. Good thing= always tell

- Exercício 6
	- S=1/((1-0,6)+0,6/n
	   =1/0,4+(0,6/n)
           =n/0,4n +0,6
	limite da 1 linha = 1/0,4 = 2,5

	- S=1/((1-0,3)+0,3/2)
	   =1/0,7+0,15
	   =1/0,85
	   =1,17

	- S=2

	  2=1/(1-p)+(p/3)
	  1=2-2p+(p/3)
	  -2p+(p/3)=-1
	  1=7p/3
	  p=3/7
	  p=0,4285

- Exercício 8
We will choose the ten-processor multiprocessor because the Amdahl’s Law says that “for a given problem and a ten-processor machine, Amdahl’s Law says that even if we manage to parallelize 90% of the solution, but not the remaining 10%, then we end up with a five-fold speedup, but not a ten-fold speedup”. In this case we will end up with a five-fold speed up. Even the number of instructions is the same (five zillion per second) we can invest an effort to derive as much as parallelism from the remaining 10% as possible, even it is difficult. In the other hand with one uniprocessor we can not increase the performance in any way.

———————————————
Capítulo 02
———————————————

11. Programmers at the Flaky Computer Corporation designed the protocol shown in Fig. 2.15 to achieve n-thread mutual exclusion. For each question, either sketch a proof, or display an execution where it fails.
	
	- Does this protocol satisfy mutual exclusion?
		Para tentar provar que o algoritmo satisfaz a condição de exclusão mútua, vamos escolher um cenário com duas threads T1 e T2, cujos IDs são 1 e 2 respectivamente. Supondo que essas duas threads entrem na seção doorway do algoritmo ao mesmo tempo, vejamos um exemplo da execução:
		
		01 [T1] linha=8  | me=1 | turn=1 | busy=false
		02 [T1] linha=9  | me=1 | turn=1 | busy=false
		03 [T2] linha=8  | me=2 | turn=2 | busy=false
		04 [T2] linha=9  | me=2 | turn=2 | busy=false
		05 [T1] linha=10 | me=1 | turn=2 | busy=true
		06 [T2] linha=10 | me=2 | turn=2 | busy=true
		07 [T2] linha=10 | me=2 | turn=2 | busy=true
		08 [T2] linha=11 | me=2 | turn=2 | busy=true   //T2 obtém o lock
		09 [T1] linha=11 | me=1 | turn=2 | busy=true
		10 [T1] linha=8  | me=1 | turn=1 | busy=true
		11 [T1] linha=9  | me=1 | turn=1 | busy=true   //a execução de T1 fica presa atÈ que T2 libere o lock
		12 [T2] linha=14 |      | turn=1 | busy=false  //T2 libera o lock
		13 [T1] linha=10 | me=1 | turn=1 | busy=true
		14 [T1] linha=11 | me=1 | turn=1 | busy=true   //T1 finalmente obtém o lock
		15 [T1] linha=14 |      | turn=1 | busy=false  //T1 libera o lock
		
		Pode-se perceber que T1 sÛ continuará a execução após T2 liberar o lock. Desse modo o algoritmo garante exclusão mútua para um número n de threads, uma vez que a variável turn não pode assumir valores múltiplos.
	
	- Is this protocol starvation-free?
		O algoritmo não é livre de starvation. Isto ocorre porque o mesmo não pode garantir que cada thread que chame o método lock() entrar· na seção crítica. Utilizando o cenário anterior, não há garantias de que logo após a T2 liberar (passo 12), T1 obterá o lock. Qualquer outra thread poder· obte-lo (pois não h· controle de execução das threads com as ferramentas que temos em mãos). Se isso ocorrer infinitamente, logo T1 ficar· para sempre aguardando e nunca obterá o lock. Uma forma de evitar isso é endereçar as threads, utilizando tickets/labels ou registros de horários durante a entrada das threads no método lock().
	
	- Is this protocol deadlock-free?
		Apesar de n„o garantir que todas as threads ir„o executar com uma espera finita, o algoritmo È livre de deadlock, uma vez que para que isso ocorresse seria necessário que turn assumisse valores múltiplos.
	
--------------------------------------------------
13. Another way to generalize the two-thread Peterson lock is to arrange a number of 2-thread Peterson locks in a binary tree. Suppose n is a power of two. Each thread is assigned a leaf lock which it shares with one other thread. Each lock treats one thread as thread 0 and the other as thread 1. In the tree-lock's acquire method, the thread acquires every two-thread Peterson lock from that thread's leaf to the root. The tree-lock's release method for the tree-lock unlocks each of the 2-thread Peterson locks that thread has acquired, from the root back to its leaf. At any time, a thread can be delayed for a finite duration. (In other words, threads can take naps, or even vacations, but they do not drop dead.) For each property, either sketch a proof that it holds, or describe a (possibly infinite) execution where it is violated.

	1. mutual exclusion.
		Imaginemos o cenário abaixo:
				  L0
				/    \
			  L1      L2
			 /  \    /  \
			T0  T1  T2  T3
		Para que uma thread execute a seÁ„o crítica, de acordo com as regras do algoritmo em quest„o, È preciso que esta tenha obtido a trava de todos os níveis inferiores, sempre executando o algoritmo de Peterson em cada um deles. Dessa forma, para que T0 chegue ‡ seÁ„o crítica, ele deve ter obtido a trava de L1 disputando com T1, além de obter a trava de L0 disputando com quem obteve a trava de L2. Logo, está caraterizada a exclusão m˙tua, uma vez que as disputas ocorrem em duplas, e o algoritmo de Peterson (executado a cada disputa) é 2-thread.
	
	2. freedom from deadlock.
		Imaginando ainda o cenário descrito anteriormente, seria preciso que em algum dos níveis houvesse uma espera comprovadamente infinita de uma thread por alguma trava. Como o algoritmo de Peterson È o responsável pela distribuição das travas em todos os níveis da árvore binária, logo não haverá deadlock, uma vez que este algoritmo é livre de starvation.
	
	3. freedom from starvation.
		(o mesmo anterior)
	
Is there an upper bound on the number of times the tree-lock can be acquired and released between the time a thread starts acquiring the tree-lock and when it succeeds?
	N„o existem um limite superior de tempo, mas ‡ medida que a árvore cresce indefinidamente o tempo de espera pode se tornar longo, sem falar no espaço de memória ocupado, ameaçando assim a propriedade first-come-first-served.
	
--------------------------------------------------
15. In practice, almost all lock acquisitions are uncontended, so the most practical measure of a lock's performance is the number of steps needed for a thread to acquire a lock when no other thread is concurrently trying to acquire the lock. Scientists at Cantaloupe-Melon University have devised the following "wrapper" for an arbitrary lock, shown in Fig. 2.16. They claim that if the base Lock class provides mutual exclusion and is starvation-free, so does the FastPath lock, but it can be acquired in a constant number of steps in the absence of contention. Sketch an argument why they are right, or give a counterexample.
	
	Executando qualquer cenário com ausência de contenção, a teoria de que o n˙mero de passos para obter a trava é constante está correta. No entanto, o algoritmo n„o pode garantir que está livre de starvation, muito menos exclusão mútua. Imagine que uma thread T1 livre de contenção obtém a trava, e que logo depois outras três threads T2, T3 e T4 tentam obter a mesma trava. Essas últimas threads ficam em espera, e logo que T1 muda y para -1 (linha 14), as últimas três saem do loop de espera e começam novamente a executar. A linha 10 do algoritmo garante que apenas a última thread que entrou no método lock() de FastPath obtenha a trava (no caso T4). Isso j· caracteriza starvation. Contudo, no exemplo (supondo uma ordem arbitrária) T2 e T3 disputariam uma trava chamando o método lock() da classe Lock, e logo uma das duas teria sucesso (suponhamos T2). Logo, existiram duas threads (T2 e T4) que obtiveram a trava, caracterizando ausência de exclusão mútua.
