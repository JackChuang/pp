import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class DequeWithLinkedList<T> {

	private LinkedList<T> deque = new LinkedList<T>();

	//locks to remove items
	private ReentrantLock leftReentratLock = new ReentrantLock();
	private ReentrantLock rightReentratLock = new ReentrantLock();

	//locks to add items
	private Object lefMutex = new Object();
	private Object rightMutex = new Object();

	/*
	 * 
	 */

	public void pushLeft(T item, String threadName) {
		synchronized (lefMutex) {
			this.deque.addFirst(item);
			printExecutionLog("Push Left", threadName);

		}

	}

	public void pushRight(T item, String threadName) {
		synchronized (rightMutex) {
			this.deque.addLast(item);
			printExecutionLog("Push Right", threadName);

		}

	}

	public void popLeft(String threadName) throws InterruptedException {

		while (!isEmpty() && leftReentratLock.tryLock()) {
			leftReentratLock.lock();

			blockAccessOtherEnd(rightReentratLock);

			try {
				this.deque.removeFirst();
				printExecutionLog("Pop Left", threadName);
			} finally {
				this.leftReentratLock.unlock();
				unblockAccessOtherEnd(rightReentratLock);
			}
		}

	}

	public void popRight(String threadName) throws InterruptedException {
		while (!isEmpty() && rightReentratLock.tryLock()) {
			rightReentratLock.lock();

			blockAccessOtherEnd(leftReentratLock);
			try {
				this.deque.removeLast();
				printExecutionLog("Pop Right", threadName);
			} finally {
				this.rightReentratLock.unlock();
				unblockAccessOtherEnd(leftReentratLock);			}
		}

	}

	private boolean isEmpty() {
		return (deque.size() == 0);
	}

	private void printExecutionLog(String action, String threadName) {
		System.out.println("<---Thread Name: " + threadName + " -> " + action);
		System.out.println("<---Thread Name: " + threadName + " -> " + "Deque Current Size: " + deque.size());
		System.out.println("<------------------------------------------------------------------------>");
		
		String filename= "/Users/admin/Desktop/logExecution.txt"; 
		boolean append = true; 
		FileWriter fw;
		try {
			fw = new FileWriter(filename,append);
			fw.write("<---Thread Name: " + threadName + " -> " + action);
			fw.write("<---Thread Name: " + threadName + " -> " + "Deque Current Size: " + deque.size());
			fw.write("<---Thread Name: " + threadName + " -> " + "Deque Current Size: " + deque.size());
			fw.write("<------------------------------------------------------------------------>");
			fw.close();  

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
	}

	private void blockAccessOtherEnd(Lock lock) {
		lock.lock();
	}

	private void unblockAccessOtherEnd(Lock lock) {
		lock.unlock();
	}

}
