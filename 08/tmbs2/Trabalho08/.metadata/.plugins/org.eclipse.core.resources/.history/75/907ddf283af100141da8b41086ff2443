
import java.util.LinkedList;
import java.util.concurrent.locks.ReentrantLock;

public class DequeWithLinkedList<T> {

	private LinkedList<T> deque = new LinkedList<T>();

	private ReentrantLock lockLeft = new ReentrantLock();
	private ReentrantLock lockRight = new ReentrantLock();

	public void pushLeft(T item, String threadName) {

		deque.addFirst(item);

		printExecutionLog("Push Left", threadName);

	}

	public void pushRight(T item, String threadName) {
		synchronized (lockRight) {

			deque.addLast(item);

			printExecutionLog("Push Right", threadName);

		}
	}

	public void popLeft(String threadName) {

		if (!isEmpty()) {

			deque.removeFirst();

			printExecutionLog("Pop Left", threadName);

		}
	}

	public void popRight(String threadName) {

		if (!isEmpty()) {

			deque.removeLast();

			printExecutionLog("Pop Right", threadName);

		}
	}

	private boolean isEmpty() {
		return (deque.size() == 0);
	}

	private void printExecutionLog(String action, String threadName) {
		System.out.println("<---Thread Name: " + threadName + " ->" + action);
		System.out.println("<---Thread Name:" + threadName + " ->" + "- Deque Current Size: " + deque.size());
		System.out.println("<------------------------------------------------------------------------>");
	}

}
