1) -----------------------------------
1. Intel® Core™ i5-2500K Processor @ 3.3GHZ

2. Number of Cores: 4 Number of Threads: 4

3. Quatro níveis de cache:  Cache L0 de 6Kbytes responsável por armazenar microinstruções. Cache L1 de 32 Kbytes por núcleo. Cache L2 de 256 Kbytes por núcleo. Cache L3 de 6MBytes compartilhada entre os núcleos.

4. Protocolo MESI:
Cada linha da cache é marcada com um dos quatro estados seguintes (codificados em dois bits adicionais):
    M - linha Modificada: a linha da cache está presente apenas na cache atual, é está suja; ela foi modificada (é diferente da memória principal). A cache é solicitada a escrever os dados de volta na memória principal em algum momento, antes de permitir qualquer outra leitura do estado da memória principal, já não válido.
    E - linha Exclusiva: a linha de cache está presente apenas na cache atual, mas está limpa; ela é igual à da memória principal.
    S - Shared line, linha compartilhada: Indica que esta linha de cache pode ser armazenada em outras caches da máquina.
    I - linha Inválida: indica que esta linha de cache é inválida.

Uma cache pode satisfazer uma leitura de qualquer estado, exceto o inválido. Uma linha inválida deve ser buscada (nos estados compartilhada e exclusiva) para satisfazer uma leitura.
Uma escrita só pode ser executada se a linha de cache estiver no estado modificado ou exclusivo. Se ela estiver no estado compartilhado, todas as outras cópias em cache devem ser invalidadas primeiro. Essa invalidação é geralmente feita através de uma operação de transmissão conhecida como Read For Ownership (RFO).
Uma cache pode rejeitar uma linha não-modificada a qualquer momento, modificando-a para o estado inválido. Uma linha modificada deve ser, antes, escrita de volta.
Uma cache que guarda uma linha no estado modificado deve interceptar (intercept) todas as tentativas de leitura (de todas as outras CPUs no sistema) o local correspondente da memória principal e inserir os dados que ela armazena. Isso é geralmente feito forçando a leitura ao back off (por exemplo, para abortar a transmissão entre memória e barramento), escrevendo então os dados na memória principal, e mudando a linha de cache para o estado compartilhado.
Uma cache que tem uma linha no estado compartilhado deve interceptar todas as transmissões inválidas de outras CPU'S, e rejeitar a linha (alterando-a para o estado inválido) correspondente.
Uma cache que tem uma linha no estado exclusivo deve também rejeitar todas as transações de leitura de todas as outras CPUs, e mudar a linha para o estado compartilhado.
Os estados modificado e exclusivo são sempre precisos: por exemplo, eles encontram uma situação de posse da verdadeira linha de cache no sistema. O estado compartilhado pode ser impreciso: se outra CPU rejeitar uma linha compartilhada, e esta CPU se tornar a única proprietária desta linha de cache, a linha não será promovida ao estado exclusivo (porque não é prático, no caso de interceptação de transmissão, transmitir todas as substituições das linhas de cache a todas as CPUs).
Neste sentido, o estado exclusivo é uma otimização oportuna: se a CPU quiser modificar uma linha de cache que está no estado compartilhado, uma transmissão de barramento é necessária para invalidar todas as outras cópias na cache. O estado exclusivo permite modificar uma linha de cache sem nenhuma transmissão por barramento.

5. 
Uso do prefixo LOCK nas instruções:
“Causes the processor’s LOCK# signal to be asserted during execution of the accompanying instruction (turns the instruction into an atomic instruction). In a multiprocessor environment, the LOCK# signal ensures that the processor has exclusive use of any shared memory while the signal is asserted.
The LOCK prefix can be prepended only to the following instructions and only to those forms of the instructions where the destination operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If the LOCK prefix is used with one of these instructions and the source operand is a memory operand, an undefined opcode exception (#UD) may be generated. An undefined opcode exception will also be generated if the LOCK prefix is used with any instruction not in the above list.”  
(Intel 64 and IA-32 Architectures Software Developer's Manual Combined Volumes 2A, 2B, and 2C: Instruction Set Reference, A-Z)



6. Segundo a especificação do processador, ele suporta memórias DDR3-1066/1333, e uma largura máxima de memória de 21 GB/s. A máquina possui memória DDR3-1600, o que "oficialmente" já extrapola o suportado pela CPU, além disso, a configuração da máquina contém 2 pentes de memória em dual channel, o que resulta em:
800,000,000 clocks por segundo x 2 linhas por clock x 64 bits por linha x 2 interfaces = 25,6 GB/s, o que excede a largura suportada pela CPU. Portanto, a configuração de memória é mais que suficiente para a CPU.


2) -----------------------------------
Uma atividade acadêmica que consistia de simular o funcionamento independente de diferentes partes do corpo de um animal durante seu processo de alimentação. A saber:
- Olhos: procuram por comida
- Cérebro: recebe sinal dos olhos indicando que foi encontrado comida. Avisao aos pés para pararem qualquer movimentação e se moverem em direção à nova comida econtrada. Uma vez que os pés indicam que o destino foi alcançado a boca é avisada para começar a comer.
- Pés: recebem sinal do cérebro indicando nova comida. Uma vez avisados, param
qualquer movimento que esteja sendo feito, e movem-se em direção à nova comida.  Uma vez que uma sequência de passos tenha sido finalizada, o cérebro deve ser avisado que o destino já foi alcaçado.
- Boca: aguarda por um sinal do cérebro para começar a comer. Fica comendo até
que seja informada para parar.

Nesta ocasião, não era permitido empregar travamento explícito ou monitores (nada de locks, synchronized, wait,notify, signal, await, etc.).

Como cada parte do corpo realizava uma atividade diferente, cada parte foi implementada como uma Thread. A sincronização das atividades das diferentes partes do corpo eram sincronizadas por mensagens gerenciadas pelo cérebro. O problema foi caracterizado como um problema de produtor/consumidor, onde as threads produzem as mensagens/sinais, que são consumidas pelas outras threads (partes do corpo).

Para tal, fizemos uso de uma BlockingQueue. As threads continuarão a produzir novos objetos (mensagens) e inserí-los na fila até que fila atinga algum limite determinado. Se a fila atinge esse limite, as threads são bloqueadas e não podem inserir novos objetos até que outra thread retire um objeto da fila.

As threads mantém-se tirando mensagens da fila e processando-os, caso a fila esteja vazia, a thread é bloqueada até que alguma outra thread insira novamente uma outra mensagem para ser consumida.
