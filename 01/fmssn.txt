Trabalho 01 - Programação Paralela

1. Descreva a arquitetura do seu computador pessoal em termos dos seguintes itens:

• Frequência de clock;
	∘ 2GHz, 2.9GHz com Intel Turbo Boost.
• Número de núcleos (físicos e virtuais) do processador:
	∘ 4 físicos, 8 threads (núcleos virtuais?)
• Número de níveis de cache e onde as memórias cache estão localizadas:
	∘ Aparentemente, 3 (L1, L2, L3)

• Como o processador mantém coerência das memórias cache:
	∘ Meu processador é um Core i7, e aparentemente usa o protocolo para coerência de cache MESIF [1, 2].
	∘ The MESIF protocol is a cache coherency and memory coherence protocol developed by Intel for cache coherent non-uniform memory architectures. The protocol consists of five states, Modified (M), Exclusive (E), Shared (S), Invalid (I) and Forward (F).
	∘ The M, E, S and I states are the same as in the MESI protocol. The F state is a specialized form of the S state, and indicates that a cache should act as a designated responder for any requests for the given line. The protocol ensures that, if any cache holds a line in the S state, at most one (other) cache holds it in the F state.
	∘ In a system of caches employing the MESI protocol, a cache line request that is received by multiple caches holding a line in the S state will be serviced inefficiently. It may either be satisfied from (slow) main memory, or all the sharing caches could respond, bombarding the requestor with redundant responses. In a system of caches employing the MESIF protocol, a cache line request will be responded to only by the cache holding the line in the F state. This allows the requestor to receive a copy at cache-to-cache speeds, while allowing the use of as few multicast packets as the network topology will allow. 
	∘ Because a cache may unilaterally discard (invalidate) a line in the S or F states, it is possible that no cache has a copy in the F state, even though copies in the S state exist. In this case, a request for the line is satisfied (less efficiently, but still correctly) from main memory. To minimize the chance of the F line being discarded due to lack of interest, the most recent requestor of a line is assigned the F state; when a cache in the F state responds, it gives up the F state to the new cache.
	∘ Thus, the main difference from the MESI protocol is that a request for a copy of the cache line for read always enters the cache in the F state. The only way to enter the S state is to satisfy a read request from another cache.
	∘ For any given pair of caches, the permitted states of a given cache line are listed in the table on the right. The order in which the states are listed has no significance other than to make the acronym MESIF pronounceable.
	∘ There are other techniques for satisfying read requests from shared caches while suppressing redundant replies, but having only a single designated cache respond makes it easier to invalidate all copies when necessary to transition to the Exclusive state.

• As instruções atômicas não-triviais (ex: LOAD e STOR são instruções "triviais" por fazerem apenas uma coisa) que estão disponíveis e o que elas fazem;
	∘ Instruções que, quando executadas com o prefixo LOCK, são atômicas [3]:
		‣ ADC
			• Adds the destination operand (first operand) and the source operand (second operand) and then stores the result in the destination operand. The destination operand can be a register or a memory location; the source operand can be an immediate, a register, or a memory location. (However, two memory operands cannot be used in one instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format.
		‣ AND
			• Performs a bitwise AND operation on the destination (first) and source (second) operands and stores the result in the destination operand location. The source operand can be an immediate, a register, or a memory location; the destination operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of the result is set to 1 if both corresponding bits of the first and second operands are 1; otherwise, it is set to 0.
		‣ BTR
			• Selects the bit in a bit string (specified with the first operand, called the bit base) at the bit-position designated by the bit offset operand (second operand), stores the value of the bit in the CF flag, and clears the selected bit in the bit string to 0.
		‣ BTS
			• Selects the bit in a bit string (specified with the first operand, called the bit base) at the bit-position designated by the bit offset operand (second operand), stores the value of the bit in the CF flag, and sets the selected bit in the bit string to 1.
		‣ CMPXCHG
			• Compares the value in the AL, AX, EAX, or RAX register with the first operand (destination operand). If the two values are equal, the second operand (source operand) is loaded into the destination operand. Otherwise, the destination operand is loaded into the AL, AX, EAX or RAX register. RAX register is available only in 64-bit mode.
		‣ CMPXCHG8B/CMPXCHG16B
			• Compares the 64-bit value in EDX:EAX (or 128-bit value in RDX:RAX if operand size is 128 bits) with the operand (destination operand). If the values are equal, the 64-bit value in ECX:EBX (or 128-bit value in RCX:RBX) is stored in the destination operand. Otherwise, the value in the destination operand is loaded into EDX:EAX (or RDX:RAX). The destination operand is an 8-byte memory location (or 16-byte memory location if operand size is 128 bits). For the EDX:EAX and ECX:EBX register pairs, EDX and ECX contain the high-order 32 bits and EAX and EBX contain the low-order 32 bits of a 64-bit value. For the RDX:RAX and RCX:RBX register pairs, RDX and RCX contain the high-order 64 bits and RAX and RBX contain the low-order 64bits of a 128-bit value.
		‣ DEC
			• Subtracts 1 from the destination operand, while preserving the state of the CF flag. The destination operand can be a register or a memory location. This instruction allows a loop counter to be updated without disturbing the CF flag. (To perform a decrement operation that updates the CF flag, use a SUB instruction with an immediate operand of 1.)
		‣ INC
			• Adds 1 to the destination operand, while preserving the state of the CF flag. The destination operand can be a register or a memory location. This instruction allows a loop counter to be updated without disturbing the CF flag. (Use a ADD instruction with an immediate operand of 1 to perform an increment operation that does updates the CF flag.)
		‣ OR
			• Performs a bitwise inclusive OR operation between the destination (first) and source (second) operands and stores the result in the destination operand location. The source operand can be an immediate, a register, or a memory location; the destination operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of the result of the OR instruction is set to 0 if both corresponding bits of the first and second operands are 0; otherwise, each bit is set to 1.
		‣ NEG
			• Replaces the value of operand (the destination operand) with its two's complement. (This operation is equivalent to subtracting the operand from 0.) The destination operand is located in a general-purpose register or a memory location.
		‣ NOT
			• Performs a bitwise NOT operation (each 1 is set to 0, and each 0 is set to 1) on the destination operand and stores the result in the destination operand location. The destination operand can be a register or a memory location.
		‣ SBB
			• Adds the source operand (second operand) and the carry (CF) flag, and subtracts the result from the destination operand (first operand). The result of the subtraction is stored in the destination operand. The destination operand can be a register or a memory location; the source operand can be an immediate, a register, or a memory location. (However, two memory operands cannot be used in one instruction.) The state of the CF flag represents a borrow from a previous subtraction.
		‣ SUB
			• Subtracts the second operand (source operand) from the first operand (destination operand) and stores the result in the destination operand. The destination operand can be a register or a memory location; the source operand can be an immediate, register, or memory location. (However, two memory operands cannot be used in one instruction.) When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format.
		‣ XADD
			• Exchanges the first operand (destination operand) with the second operand (source operand), then loads the sum of the two values into the destination operand. The destination operand can be a register or a memory location; the source operand is a register.
		‣ XOR
			• Performs a bitwise exclusive OR (XOR) operation on the destination (first) and source (second) operands and stores the result in the destination operand location. The source operand can be an immediate, a register, or a memory location; the destination operand can be a register or a memory location. (However, two memory operands cannot be used in one instruction.) Each bit of the result is 1 if the corresponding bits of the operands are different; each bit is 0 if the corresponding bits are the same.


• A velocidade da memória que está rodando na sua máquina. Ela é rápida o suficiente para o processador? Sim? Não? Por quê?
	∘ velocidade:
		‣ DDR3 1333MHz
	∘ Ela é rápida o suficiente? Por quê?
		‣ Pela especificação do fabricante, é a velocidade indicada para o processador. => Sim.
		‣ Entretanto, ainda é mais lenta do que o processador, logo pode ser considerada não suficiente => Não.
		‣ É preciso avaliar também a velocidade do barramento. => Talvez.


2. Você já precisou construir programas paralelos, seja por motivos de estudo, seja por motivos profissionais?

Escolha o mais complexo desses programas e descreva-o. Explique porque ele precisa realizar várias atividades ao mesmo tempo e em que consistiam essas atividades. Esse programa era "embaraçosamente" paralelo ou exigia sincronização entre as tarefas? Que problemas você enfrentou ao construi-lo (ou ajudar a construi-lo)?
	• Sim. Raramente tive pedaços de software embaraçosamente paralelos. Em geral, era necessária alguma sincronização.
	• Por exemplo, em mais de um sistema distribuído em que trabalhei, informações sobre nós conectados na rede precisavam ser armazenadas em HashMaps. Essas informações eram então acessadas por múltiplas threads simultaneamente. Como cada mensagem que se chegava era preciso acessar informações dos nós - ler, atualizar, deletar, adicionar - esses objetos tinham que ter algum controle de concorrência. Em geral, o próprio controle de concorrência de algumas bibliotecas de Java (ConcurrentHashMap, por exemplo) já resolvia nosso problema. Algumas vezes era necessário um controle mais refinado, e em geral utilizávamos de blocos sincronizados ou métodos sincronizados.


[1] Hennessy, J. L., Patterson, D. A. Computer Architecture: A Quantitative Approach. http://books.google.com.br/books?id=v3-1hVwHnHwC&lpg=PA362&ots=H0YpI_99vK&dq=mesif%20protocol%20i7&pg=PA362#v=onepage&q=mesif%20protocol%20i7&f=false

[2] MESIF protocol. Wikipedia. http://en.wikipedia.org/wiki/MESIF_protocol

[3] Intel® 64 and IA-32 Architectures Software Developer’s Manual. Volume 2 (2A & 2B): Instruction Set Reference, A-Z. http://www.read.seas.harvard.edu/~kohler/class/aosref/IA32-2B.pdf
