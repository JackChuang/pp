1.
    1.1.
        2.7GHz

    1.2.
        2 núcleos físicos e 4 virtuais

    1.3.
        3 níveis de cache. Cada núcleo físico possuem suas próprias caches L1 (64KB) e L2 (256KB). Uma L3 (4096KB) é
        compartilhada entre os núcleos.

    1.4.
        Usa o protocolo MESIF, onde cada linha da cache pode estar em um dos estados abaixo:
            - M -> Modified: A linha da cache está presente apenas nessa cache, porém está suja (diferente do valor
              presente na memória principal). O valor da memória principal deve ser atualizado, antes de alguma
              leitura na memória principal ser permitido.
            - E -> Exclusive: A linha de cache está presente apenas nessa cache, mas está limpa (valor igual ao da
              memória principal).
            - S -> Shared: A linha está compartilhada (existe em mais de uma cache), mas está limpa.
            - I -> Invalid: A linha de cache está inválida (sem uso).
            - F -> Forward: Se uma linha de cache está compartilhada entre várias caches, uma delas estará no estado F e
              as outras no estado S. Com isso, é garantido que uma solicitação dessa linha de cache será respondida por
              apenas uma cache, evitando o solicitante ser bombardeado por respostas pelas várias caches que possuem a
              linha.

    1.5.
        Algumas que considerei não triviais:
        - BTC—Bit Test and Complement: Seleciona um bit numa string de bits, guarda ele na CF flag e complementa o bit
        na string.
        - BTR—Bit Test and Reset: Seleciona um bit numa string de bits, guarda ele na CF flag e reseta o bit na string
        para 0.
        - BTS—Bit Test and Set: Seleciona um bit numa string de bits, guarda ele na CF flag e seta o bit na string para
        1.
        - CMPXCHG—Compare and Exchange: Compara o valor no registrador AL, AX, EAX ou RAX com o primeiro operando
        (destino). Se forem iguais o valor do segundo operando é carregado no primeiro operando, caso contrário, o valor
        do primeiro operando é carregado no registrador.

    1.6.
        Sim, é suficiente. De acordo com a espeficicação do meu processador, a vazão máxima é de 21.3 GB/s. Meu
        computador possui dois slots de memória DDR3, suportando frequência máxima de 1333 MHz, com barramento de 64
        bits. Com isso temos:
            1333000000 (clocks por segundo) x 2 (interfaces) x 64 (bits por clock) = 19.86 GB/s


2.
    Sim. Desenvolvi uma ferramenta de análise de tráfego para redes banda larga de 1Gbps. A primeira versão possuia duas
    threads:
        Main thread: para captura de pacotes, agregação (inserção de fluxos em uma Hash Table) e classificação.
        Thread 2: limpeza da Hash table a cada 5 minutos, para evitar memory overflow.
    Com isso, cada vez que a thread de limpeza era executada acarretava no bloqueio da thread de captura e agregação,
    para evitar possíveis problemas (e.g. thread acessando um fluxo que estaria sendo removido pela thread de limpeza),
    fazendo com que pacotes fossem descartados. Consequentemente, não era possível atingir 1Gbps de velocidade.
    Uma nova arquitetura foi feita onde múltiplas threads de captura eram iniciadas e um módulo do kernel fazia o
    balanceamento de pacotes entre essas threads, de modo que pacotes do mesmo fluxo sempre fossem para a mesma thread.
    Com isso, cada thread poderia ter sua Hash table independente das outras. A thread de limpeza ainda existe, porém
    limpando uma Hash table por vez, fazendo com que, no mínimo, sempre haja N-1 threads de captura executando. Com essa
    arquitetura foi possível atingir 1Gbps de velocidade.
    Como é possível notar, pela descrição acima, o programa não é embaraçosamente paralelo, pois precisa de
    sincronização entre a thread de limpeza e a thread de captura na qual a Hash Table está sendo limpa.
