Respostas: 

1.Descreva a arquitetura do seu computador pessoal em termos dos seguintes itens:
a) Frequência de clock: 
	2.4GHz [1]

b) Número de núcleos (físicos e virtuais) do processador: 
	4 físicos e 8 virtuais [1]

c) Número de níveis de cache e onde as memorias cache estão localizadas: 
	3 níveis de cache [1]. L1 e L2 ficam junto ao core enquanto a L3 é compartilhada por todos eles [2]

d) Como o processador mantem coerência das memórias cache:
	O controlador DRAM é responsável por manter a coerência. Se os dados requisitados não estiverem na cache do processador ou se o dado na memória externa for mais novo que a cópia presente na cache, é dito para o controlador de memória recuperar os dados no endereço requisitado. Os dados transferidos entre o processador e a memória serão sempre de 64 bits. [2]
	São utilizados os protocolos MESIF e junto com o processo de Snooping 
e) As instruções atômicas nao-triviais (por exemplo, um LOAD ou um STOR são instruções “triviais” por fazerem apenas uma coisa) que estão disponíveis e o que elas fazem.

	As instruções a seguir precisam da instrução LOCK para serem realizadas atomicamente [3]:
	
	ADC - Add with carry. Adiciona o operador de destino (primeiro operador), o operador da fonte (segundo operador) e o carry (CF) flag e então armazena o resultado no operador de destino.
	ADD - Add. Adiciona o operador de destino (primeiro operador), o operador da fonte (segundo operador) e então armazena o resultado no operador de destino.
	AND - Logical AND. Realiza uma operação AND bit-a-bit entre os operadores destino (primeiro) e fonte (segundo) e armazena o resultado no operador de destino.
	BTC - Bit Test and Complement. Seleciona um bit numa cadeia de bits (especificamente selecionado pelo primeiro operador, chamado de bit base) e a posição do bit desiginada pelo operador de bit offset (segundo operador), armazena o valor do bit no CF flag, e complementa o bit selecionado na cadeia de bits.
	BTR - Bit Test and Reset. Seleciona um bit numa cadeia de bits (especificamente selecionado pelo primeiro operador, chamado de bit base) e a posição do bit desiginada pelo operador de bit offset (segundo operador), armazena o 		valor do bit no CF flag, e modifica o bit selecionado na cadeia de bits para 0.
	BTS - Bit Test and Set. Seleciona um bit numa cadeia de bits (especificamente selecionado pelo primeiro operador, chamado de bit base) e a posição do bit desiginada pelo operador de bit offset (segundo operador), armazena o valor do bit no CF flag, e modifica o bit selecionado na cadeia de bits para 1.
	CMPXCHG - Compare and Exchange. Compara o valor nos registradores AL, AX, EAX, or RAX com o primeiro operador (operador destino)
	CMPXCHG8B/CMPXCHG16B - Compare and Exchange Bytes. Compara o valor de 64-bit em EDX:EAX (ou valor de 128-bit em RDX:RAX se o tamanho do operador for 128 bits) com o operando (operando destino).
	OR - Logical Inclusive OR. Realiza uma operação OR bit-a-bit entre os operadores destino (primeiro) e fonte (segundo) e armazena o resultado no operador de destino.
	SBB - Integer Subtraction with Borrow. Adiciona o operador fonte (segundo operador) e o carry (CF) flag, e subtrai o resultado do operador destino (primeiro operador).
	SUB - Subtract. Subtrai o segundo operador (operador fonte) do primeiro operador (operador destino) e armazena o resultado no operador destino.
	XADD - Exchange and Add. Troca o primeiro operador (operador destino) com o segundo operador (operador fonte), e então armazena a soma dos dois valores no operador destino.
	XEND - Transactional End. Marca o fim de uma região de código RTM.
	XOR - Logical Exclusive OR. Realiza uma operação XOR bit-a-bit entre os operadores destino (primeiro) e fonte (segundo) e armazena o resultado no operador de destino.

f)A velocidade da memoria que esta rodando na sua maquina. Ela e rápida o suficiente para o processador? Sim? Não? Por quê?

	DRAM frequency : 800MHz. Bus Speed: 100MHz. FSB:DRAM : 1:6.
	Devido a quantidade enorme de fatores que influênciam os acontecimentos dentro de uma CPU, não é possível afirmar se a memória é rápida o suficiente ou não.
	
2. Você já precisou construir programas paralelos, seja por motivos de estudo, seja por motivos prossionais? Escolha o mais complexo desses programas e descreva-o. Explique porque ele precisa realizar varias atividades ao mesmo tempo e em que consistiam essas atividades. Esse programa era “embaraçosamente” paralelo ou exigia sincronização entre as tarefas? Que problemas você enfrentou ao construi-lo (ou ajudar a construi-lo)?

	Já precisei construir diversos sistemas paralelos, vários por motivos de estudo e alguns poucos por motivos profissionais. O sistema mais complexo que fiz foi durante a minha iniciação científica, no qual eu trabalhei numa ferramenta para garantir que threads executadas dentro de um determinado bloco seriam seguras, isto é, problemas decorrentes do uso de programação concorrente não seriam tratados pelo programador, mas implicitamente pela ferramenta.
	Este programa exigia a sincronização das tarefas, uma vez que era necessários modificar o código fonte e lidar com a concorrência das threads, e não somente executar o mesmo programa diversas vezes. 
	O maior problema durante a construção da ferramenta, em relação ao paralelismo, eram os blocos seguros aninhados (caso em que um bloco seguro contém um outro bloco seguro dentro dele), uma vez que há problemas com o escopo das variáveis. Outros problemas de programação concorrente são naturais como a utilização de monitores e locks para sincronização das threads.

Referências

[1] http://ark.intel.com/products/75116/Intel-Core-i7-4700HQ-Processor-6M-Cache-up-to-3_40-GHz 
[2] http://www.intel.com/content/dam/www/public/us/en/documents/white-papers/ia-introduction-basics-paper.pdf
[3] http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf 





