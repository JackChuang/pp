#1

    Intel(R) Core(TM) i7-3770

    - 3.40GHz.

    - 4 núcleos físicos e 8 núcleos virtuais.

    - 3 níveis de cache (L1, L2 e L3). As memórias L1 e L2 estão localizadas em cada núcleo físico enquanto a L3 é localizada no processador e é compartilhada entre os núcleos.

    - Utilizando o protocolo MESIF [1][2] que consiste em extensão do protocolo MESI.

    - As seguintes instruções podem ser executadas atomicamente:
        + ADC (Add with Carry)
        + ADD
        + AND (Logical AND)
        + BTC (Bit Test and Complement)
        + BTR (Bit Test and Reset)
        + BTS (Bit Test and Set)
        + CMPXCHG (Compare and Exchange)
        + CMPXCHG8B/CMPXCHG16B (Compare and Exchange Byte)
        + DEC (Decrement by 1)
        + INC (Increment by 1)
        + NEG (Two's Complement Negation)
        + NOT (One's Complement Negation)
        + OR (Logical Inclusive OR)
        + SBB (Integer Subtraction with Borrow)
        + SUB (Subtract)
        + XADD (Exchange and Add)
        + XOR (Logical Exclusive OR)i
        + XCHG (Exchange Register/Memory with Register)


    - Sim, é suficiente. Se calcularmos a vazão de dados da memória temos que: 1600000000 (clocks/segundo) x 2 (dual-channel) x 64 (bits/clock) = 23.8 GB/s. Como a vazão máxima do processador é 25.6 GB/s, é possível afirmar que a velocidade da memória é rápida o suficiente para o processador 

#2
O programa mais complexo que desenvolvi envolvendo paralelismo foi um motor de busca para arquivo textuais. O problema foi extraído deste trabalho [3] e as implementações podem ser encontradas aqui [4][5]. A principal motivação para o desenvolvimento desse programa foi entender o funcionamento de Memória Transacional em Software e comprar a implementação dessa técnica em duas linguaguens distintas (Haskell e Clojure).

Esse programa não pode ser caracterizado como embaraçosamente paralelo pois exige sincronização em diversos pontos. Embora o processamento de cada arquivos textual (leitura, uniformização, pré-processamento e transformação em lista de ocorrência) seja uma tarefa distinta e não depende de outros dados senão o caminho do arquivo a ser processado, a indexação do arquivo precisa ser sincronizada, pois é necessário manter uma única estrutura de dados para o programa para funcionar como índice das buscas.

Boa parte dos problemas enfrentados estavam relacionados a sincronização, principalmente em como evitar contenção desnecessária.

[1] - http://www.cs.cmu.edu/afs/cs/academic/class/15418-s12/www/lectures/10_coherence.pdf
[2] - http://www.realworldtech.com/common-system-interface/5/
[3] - A study of transactional memory vs. locks in practice. Victor Pankratius and Ali-Reza Adl-Tabatabai. (2011)
[4] - https://github.com/luisgabriel/tsearch
[5] - https://github.com/luisgabriel/tsearch-clj
